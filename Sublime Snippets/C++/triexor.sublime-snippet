<snippet>
	<content><![CDATA[
const int LN  = 29;                 //equals ceil(log2(n)), where n is the maximum number to be inserted
const int MAX = 2e5 + 5;            //equals number of elements which can be inserted
const int LIM = MAX * LN;

struct trie_item {
	int cnt;
	trie_item *go[2];
};

static trie_item trie_allocator[LIM] = {};
static int trie_allocated = 0;

trie_item* trie = NULL;

inline trie_item* alloc_item() {
	trie_item *res = trie_allocator + (trie_allocated++);
	res->cnt = 0;
	res->go[0] = res->go[1] = NULL;
	return res;
}

inline int cnt(trie_item* t) {
	return t ? t->cnt : 0;
}

//Complexity : O(LN)
void add(trie_item* t, int n, int idx, int inc) {
	t->cnt += inc;
	if (idx == -1) {
		return;
	}
	int i = ((n & (1 << idx)) != 0) ? 1 : 0;
	if (!t->go[i]) {
		t->go[i] = alloc_item();
	}
	add(t->go[i], n, idx - 1, inc);
}

//Complexity : O(LN)
void max(trie_item* t, int n, int idx, int *res) {
	if (!(cnt(t->go[0]) || cnt(t->go[1]))) {
		return;
	}
	int i = ((n & (1 << idx)) != 0) ? 0 : 1;
	if (!cnt(t->go[i])) {
		i = !i;
		(*res) = (*res) * 2;
	}
	else {
		(*res) = (*res) * 2 + 1;
	}
	max(t->go[i], n, idx - 1, res);
}

//Prints the content of Trie for debugging purpose
void print(trie_item* t) {
	static char out_buffer[1000];
	static char* bufptr = out_buffer;
	if (!t) {
		return;
	}
	*bufptr = '\0';
	int i, outcnt = cnt(t) - cnt(t->go[0]) - cnt(t->go[1]);
	for (i = 0; i < outcnt; i++) {
		puts(out_buffer);
	}
	for (i = 0; i < 2; i++) {
		*(bufptr++) = '0' + i;
		print(t->go[i]);
		bufptr--;
	}
}

void add(int n, int inc) {
	add(trie, n, LN, inc);
}

int max(int n) {
	int res = 0;
	max(trie, n, LN, &res);
	return res;
}

void init() {
	trie = alloc_item();
	add(0, 1);
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>triexor</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.cpp, source.c++, source.c</scope>
	<!-- Optional: Description to show in the menu -->
	<description>Trie for Xor maximisation</description>
</snippet>
